#!/bin/bash
# Pre-commit hook to prevent direct /src modifications
# Install by running: ./scripts/hooks/install-hooks.sh

# Colors for output
RED='\033[0;31m'
YELLOW='\033[1;33m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color

# NOTE: We used to check custom.css import path here, but that's obsolete now.
# custom.css is now a COMPILED file generated by scripts/build/compile-css.py
# from modular source files in theme/css/. The import check is no longer needed.

# Check if any /src files are being committed (except allowed files)
ALLOWED_FILES="src/SUMMARY.md src/introduction.md src/relationships.json src/airtable-metadata.json"

# Get list of staged files in /src
STAGED_SRC_FILES=$(git diff --cached --name-only | grep "^src/" || true)

if [ -z "$STAGED_SRC_FILES" ]; then
    # No /src files being committed, all good
    exit 0
fi

# Check each staged /src file
DISALLOWED_FILES=""
for file in $STAGED_SRC_FILES; do
    # Check if this file is in the allowed list
    is_allowed=false
    for allowed in $ALLOWED_FILES; do
        if [ "$file" = "$allowed" ]; then
            is_allowed=true
            break
        fi
    done
    
    if [ "$is_allowed" = false ]; then
        DISALLOWED_FILES="$DISALLOWED_FILES$file\n"
    fi
done

if [ -n "$DISALLOWED_FILES" ]; then
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${RED}⚠️  Commit blocked: Direct /src modifications detected${NC}"
    echo -e "${RED}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo "The following files should not be edited directly:"
    echo -e "$DISALLOWED_FILES"
    echo "These files are auto-generated from source-documents/"
    echo ""
    echo -e "${YELLOW}To fix this:${NC}"
    echo "1. Move your changes to the corresponding files in source-documents/"
    echo "2. Run: git reset HEAD src/"
    echo "3. Run: git checkout -- src/"
    echo "4. Run: ./build-all.sh"
    echo "5. Commit the source-documents/ files instead"
    echo ""
    echo -e "${YELLOW}To bypass (NOT recommended):${NC}"
    echo "  git commit --no-verify"
    echo ""
    exit 1
fi

# Also run the validation script if it exists
if [ -f "scripts/validation/check-src-modifications.sh" ]; then
    ./scripts/validation/check-src-modifications.sh >/dev/null 2>&1 || {
        echo -e "${YELLOW}⚠️  Warning: /src validation check failed${NC}"
        echo "Run ./scripts/validation/check-src-modifications.sh for details"
        # Don't block commit, just warn
    }
fi

# Check if CSS files were modified and remind about visual tests
CSS_FILES_MODIFIED=$(git diff --cached --name-only | grep -E "theme/css/.*\.css$|^custom\.css$" || true)

if [ -n "$CSS_FILES_MODIFIED" ]; then
    echo ""
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo -e "${YELLOW}⚠️  CSS files modified - Visual regression tests recommended${NC}"
    echo -e "${YELLOW}━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━${NC}"
    echo ""
    echo "Modified CSS files:"
    echo "$CSS_FILES_MODIFIED" | sed 's/^/  - /'
    echo ""
    echo -e "${GREEN}To check for visual regressions:${NC}"
    echo "  npm run test:visual"
    echo ""
    echo -e "${GREEN}Or build and test in one command:${NC}"
    echo "  ./build-all.sh --test"
    echo ""
    echo "See docs/visual-testing-guide.md for full workflow"
    echo ""
fi

exit 0